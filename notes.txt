<img
    src="assets/icons/icons8-html-5.svg"
    alt=""
    loading="lazy"
    class="icon icon-card"
    />

* loading attribute to the individual icons and images 
and setting it to lazy. This will make sure that 
the images are loaded only when the user scrolls 
to the sections containing them. This will subsequently 
speed up load time, because only what is needed will be loaded.

What I need to do:

add more projects,




deployment:

github hosting
free with github.io domain
no cpanel and very easy to deploy
can always go with paid hosting after
i am only serving a personal projects website
which will not server many clients anyway.
also not too sure of what the names/designs the website
will have. 


provider hosting
bluehost costs about $100 usd/year
easily looking at $100 usd/year to have one website up.

updating changes to github.io

git remote add origin https://github.com/CKIMM7/testpage.git
git branch -M main
git push -u origin main

Expanding Cards:

Initial setup of HTML/CSS


Explanation of the code
The code below saves html dom nodes as a NodeList which returns
a collection of document nodes which in this case returns elements
in an array like collection for us to access and control our dom nodes.
The NodeList comes with different properties but we are interested in 
forEach method which acts just like forEach method that we use on an array.

const panels = document.querySelectorAll('.panel')

Because we are using CSS class to expand the card that is clicked on, 
so we need to add an event listener to every element node so that it will
take off the current 'active' class and add 'active' to the class whose 
dom element we clicked on. and this is done by the code below:

panels.forEach(panel => {

    panel.addEventListener('click', () => {
        removeActiveClasses()
        panel.classList.add('active')
    })
})

To remove 'active' class, it calls on removeActiveClasses function which 
goes through each which element node and takes off 'active' class if there
is one.

function removeActiveClasses() {

    panels.forEach(panel => {
        panel.classList.remove('active')
    })
}

after removeActiveClasses function is called, we add class 'active' to the 
element node that we just clicked on.
  
02-progress-steps

HTML/CSS set-ups

    <div class="container">
      <div class="progress-container">
        <div class="progress" id="progress"></div>
        <div class="circle active">1</div>
        <div class="circle">2</div>
        <div class="circle">3</div>
        <div class="circle">4</div>
      </div>

      <button class="btn" id="prev" disabled>Prev</button>
      <button class="btn" id="next">Next</button>
    </div>

progress-container wraps the child elements with flex 


lets now save dom nodes to our variables like below

const progress = document.getElementById('progress')
const prev = document.getElementById('prev')
const next = document.getElementById('next')
const circles = document.querySelectorAll('.circle')

progress is a div that tracks progress in a horizontal line done by css
prev/next are just buttons to move the progress around
circles are just divs that are shaped to be circles by css

The button 'next' has an event listener which +1 the currentActive 
which is a global variable which is initilized to be 1.

if currentActive which is 2 when clicked on after the first load of the page
it is not greater than the nodeList's length of 4, so it will not execute

currentActive = circles.length

	and now it will run update function which updates CSS styling of
our progress and circle nodes

first for the circles' border styling, we need to add class to circle dom nodes
whose index is lower than the global currentActive. so if the global currernt
active is 3, the first two circle dom nodes will have class 'active' which
basically add this CSS codes to our current: when put on active class

.circle {
  background-color: #fff;
  color: #999;
  border-radius: 50%;
  height: 30px;
  width: 30px;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 3px solid var(--line-border-empty);
  transition: 0.4s ease;
}

.circle.active {
  border-color: var(--line-border-fill);
}
 
if we go from 4 to 3 as our global currentActie, it will also work
remove the active if the dom node index is less than 3

this is done by this code in the update function:

circles.forEach((circle, idx) => {
        if(idx < currentActive) {
            circle.classList.add('active')
        } else {
            circle.classList.remove('active')
        }

next we must update our length for the progress bar which
is done by getting the number of dom nodes in the nodeList minus one and
dividing it by the number of circles minus 1 and timing it by 100 to get 
percentage which is a value that can be used on CSS's width property.

03-rotating-navigation

here are the dom nodes for the to control

const open = document.getElementById('open')
open is a button that adds class 'show-nav' to the 'container' div
which contains the entire content except for the elements in ul tag

const close = document.getElementById('close')
open is a button that removes class 'show-nav' to the 'container' div
which contains the entire content except for the elements in ul tags

const container = document.querySelector('.container')
a div that has the content div with two buttons, when it gets its class
added to be container 'container show-nav', it rotates -20 degrees by css
code below: 

.container.show-nav {
  transform: rotate(-20deg);
}

what should happen at the same time is to rotate the circle that has the
two buttons which we are using as our dom nodes to toggle the container div
to open and close.

for the cicle to rotate as well at the same time, we must add 
to be able to target the class .circle after the open button has been clicked,
we must add .containier.show-nav because if not the css selector will apply
when container div is container which means, the circle will stay rotated by
-60 deg or how many degrees it is already specified in the style.css

we want it to apply only when the .container gets its class added to be 
.container.show-nav or .container show-nav which makes sense if not it will
stay rotated from the get go.

04-hidden-search-widget

first lets look at dom nodes in our index.html which are:

const search = document.querySelector('.search')
const btn = document.querySelector('.btn')
const input = document.querySelector('.input')

which refers to

<div class="search">
      <input class="input" type="text" placeholder="Search...">
      <button class="btn">
        <i class="fas fa-search"></i>
      </button>
    </div>

search refers to the parent idv which contains input and button elements
input with class 'input' is the search bar, 
button with class 'btn' is the button with an event listener for click
that triggers a change in the css file for the search div by making a change
to its class

note on the css

why should the display property of 'btn' be abosolute?
if the btn's display property is not aboslute, it's positioning will be
based on the html doc and will not stay within the search container.

when we expand our search div, we want the button to move by 198px relative
to the parent div which is our search div.

Position the parent container relative so that we can position the child
elements abosolute relative to the parent container's normal position.

05-blurry-loading

Dom nodes:

const loadText = document.querySelector('.loading-text')
const bg = document.querySelector('.bg')

global variables that change:

let load = 0
let int = setInterval(blurring, 30)

setInterval accepts two argements,
first argument is a function call back and
second argument is the frequency for the call back to happen in miliseconds

what is the call back then?

function blurring() {
  load++

  if (load > 99) {
    clearInterval(int)
  }

  loadText.innerText = `${load}%`
  loadText.style.opacity = scale(load, 0, 100, 1, 0)
  bg.style.filter = `blur(${scale(load, 0, 100, 30, 0)}px)`
}

basically we are calling the blurring function every time untill 
the global variable 'load' hits 100 which will take out our clearInterVal
function. Untill 100, then the blurring func will update our dom nodes' 
styles for every increment.

starting with 0
int calls setInterval(blurring, 300) which calls blurring function
for the first time in the call back function:

it increments the load variable by 1 from 0 to 1.

since 1 is less than 99, clearInterval(int) will earase the current interval
with the load variaible value of 1.

  loadText.innerText = `${1}%`

will render 1 to the dom as 1%

  loadText.style.opacity = scale(1, 0, 100, 1, 0)
will call scale function which is

const scale = (1, 0, 100, 1, 0) => {
  return ((1 - 0) * (0 - 1)) / (100 - 0) + 1}

which returns an opacity of 0.99 to our text dom node 
and as the num = load increases, the text will slowly disappear because
the opacity will decrement from 0.99 to 0.0

and as for bg which is the the background photo,

it starts from 30 and drops down to 0.0 
which can be done with this code:

  bg.style.filter = `blur(${scale(load, 0, 100, 30, 0)}px)`

when scale is called it will render a dynmic value but as a string each time
which could be comething like:

`blur(24.9px)` which will render 
filter: blur(24px); as a css property to bg dom node

06-scroll-animation

very simple html structure which is all divs with class of 'box',
we can save all of these elements in a nodeList by doing the code below
which then will be used 

const boxes = document.querySelectorAll('.box')

we initally call checkBoxes function which is

function checkBoxes() {
    console.log("scrolled");
    const triggerBottom = window.innerHeight / 5 * 4

    boxes.forEach(box => {
        const boxTop = box.getBoundingClientRect().top

        if(boxTop < triggerBottom) {
            box.classList.add('show')
        } else {
            box.classList.remove('show')
        }
    })
}

checkBoxes function gets called for every scroll on the window or doc
    const triggerBottom = window.innerHeight / 5 * 4
	which is 804 / 5*4 = 804 / 20 = 641.6

        const boxTop = box.getBoundingClientRect().top

The Element.getBoundingClientRect() method returns a DOMRect object 
providing information about the size of an element 
and its position relative to the viewport.

returned value: 

The returned value is a DOMRect object which is the smallest rectangle 
which contains the entire element, including its padding and border-width. 
The left, top, right, bottom, x, y, width, and height properties describe 
the position and size of the overall rectangle in pixels. 
Properties other than width and height are relative to the top-left of 
the viewport.

so the first box will return boxTop of the height of h1 plus margin of the
first box which is 10 + 38.2 + 10 + 10 = 68.2 next one is basically the same
but with  200 + 20 which is 288.2 px 

and this scroll eventListener gets recalculated for every scroll

now for our first box without any scroll returns a boxtop of 68px and the
trigerrBottom is always 641.6px

since boxTop(68) is smaller than triggerBottom (641.6), it will gets a class
of 'show' by this code:

  if(boxTop < triggerBottom) {
            box.classList.add('show')
        } else {
            box.classList.remove('show')
        }

when that happens the css code below will kick in

.box.show {
  transform: translateX(0);
}

the generated top is:

68.22222137451172
script.js:14 288.22222900390625
script.js:14 508.22222900390625
script.js:14 728.2222290039062

the fourth box is greater than triggerBottom, so it will not get the class
'show' added.

if you scroll one more time, the viewport's top will get closer to the 
triggerBottom, and with one more scroll, the fourth box's top will have
a value smaller than the triggerBottom which then will get its class added.

07-split-landing-page

html set up:
    <div class="container">
      <div class="split left">
        <h1>Playstation 5</h1>
        <a href="#" class="btn">Buy Now</a>
      </div>
      <div class="split right">
        <h1>XBox Series X</h1>
        <a href="#" class="btn">Buy Now</a>
      </div>
    </div>

container div contains two divs
left div is playstation and
right div is xbox and each left and right div has h1
also link tag with class 'btn'

on the two dom nodes, we add two event listeners each to expand the photo
and also to bring it back to its original size which is the code below:


left.addEventListener('mouseenter', () => container.classList.add('hover-left'))
left.addEventListener('mouseleave', () => container.classList.remove('hover-left'))

right.addEventListener('mouseenter', () => container.classList.add('hover-right'))
right.addEventListener('mouseleave', () => container.classList.remove('hover-right'))

the event we are using is hover-left and hover-right to trigger the divs to
change their class to hover-left or hover-right for the css file to reflect
the class change.

note on the css:

when you want to position an element based on the immediate parent,
you can set the child element's position to be absolute.
which centers the h1 exactly to be in the middle and gives 20% from top

h1 {
  position: absolute;
  font-size: 4rem;
  color: #fff;
  left: 50%;
  top: 20%;
  transform: translateX(-50%);
  white-space: nowrap;
}

we do however have to add translateX(-50%) to be able to center the element
h1. without it, the h1's left would be the starting point.

when the event 'mouseenter' takes place, div with the container class 
gets class 'hover-left' added which then becomes 'container hover-left'
when it becomes the class 'container hover-left', the following css code kicks in

.hover-left .left {
  width: var(--hover-width);
}

.hover-left .right {
  width: var(--other-width);
}

we can use the code above to select the two screes to resize them.

08-form-wave-animation

const labels = document.querySelectorAll('.form-control label')
saves the two labels in the form element which is wrapped inside a container div,

the first label is 'Email' and the second is 'Password'.

now that we have the two label dom nodes in a nodeList, we can run
forEach method on both of them.

What we want to eventually return is the code below:

          <!-- <label>
            <span style="transition-delay: 0ms">E</span>
              <span style="transition-delay: 50ms">m</span>
              <span style="transition-delay: 100ms">a</span>
              <span style="transition-delay: 150ms">i</span>
              <span style="transition-delay: 200ms">l</span>
        </label> -->

<span style="transition-delay:0ms">E</span>
<span style="transition-delay:50ms">m</span>
<span style="transition-delay:100ms">a</span>
<span style="transition-delay:150ms">i</span>
<span style="transition-delay:200ms">l</span>

and using some of the String/Array methods, we can render the them.
first, we want to return an html element, so we have to take the 
label's innerText and save it to innerHTML.

Once we do that, what we end up is:
we have a string 'email' and 'password' saved to our label.
Now we want to seperate each letter of label.innerHTML using .split()
and return it in an array which returns:

(5) ['E', 'm', 'a', 'i', 'l']
script.js:11 E,m,a,i,l

now since our goal is to return something like:

<span style="transition-delay:0ms">E</span>

we want to dynamically set our each letter and index for our css.
that is this code below:

.map((letter, idx) => `<span style="transition-delay:${idx * 50}ms">${letter}</span>`)

which returns:

5) ['<span style="transition-delay:0ms">E</span>', '<span style="transition-delay:50ms">m</span>', '<span style="transition-delay:100ms">a</span>', '<span style="transition-delay:150ms">i</span>', '<span style="transition-delay:200ms">l</span>']
0: "<span style=\"transition-delay:0ms\">E</span>"
1: "<span style=\"transition-delay:50ms\">m</span>"
2: "<span style=\"transition-delay:100ms\">a</span>"
3: "<span style=\"transition-delay:150ms\">i</span>"
4: "<span style=\"transition-delay:200ms\">l</span>"
length: 5
[[Prototype]]: Array(0)

however, this will just return commas in between
	
quick note:
innerText never renders anything, so we have to tweak the innerHTML.
Which is why innerHTML = innerText and innerHTML = innerHTML works
but innerText = innerText or innerText = innerHTML does not work.

so if you do innerText on this

labels.forEach(label => {
    console.log(
    label.innerText
        .split('')
        .map((letter, idx) => `<span style="transition-delay:${idx * 50}ms">${letter}</span>`)
        .join('')
        )
        
    console.log(label.innerHTML)    
})

you never have changed the actual HTML element or the dom node, only thing
you changed was the innerText but innerText does not return any HTML elements
so what you want to do is:

labels.forEach(label => {
    console.log(
    label.innerHTML = label.innerText
        .split('')
        .map((letter, idx) => `<span style="transition-delay:${idx * 50}ms">${letter}</span>`)
        .join('')
        )
        
    console.log(label.innerHTML)    
})

which explains:

innerText returns all text contained by an element and all its child elements.
innerHtml returns all text, including html tags, that is contained by an element.

the values of Element.innerHTML is

A string containing the HTML serialization of the element's descendants. 
Setting the value of innerHTML removes all of the element's descendants 
and replaces them with nodes constructed by parsing the HTML given 
in the string htmlString.

and if you log on the nodelist after
the the two objects for the two properties above in the nodelList return:

innerHTML: "<span style=\"transition-delay:0ms\">E</span><span style=\"transition-delay:50ms\">m</span><span style=\"transition-delay:100ms\">a</span><span style=\"transition-delay:150ms\">i</span><span style=\"transition-delay:200ms\">l</span>"
innerText: "Email"

which is what we want.

so in summary, what we want is to modify our innerHTML and return
the right html elements which then become child elements of that element
which in our case is label.

09-sound-board

very simple project,
we start with an array of strings that match each audio sound:

const sounds = ['applause', 'boo', 'gasp', 'tada', 'victory', 'wrong']

and then we run a array method forEach on the array,
for every string in forEach loop,

we make create an element and give it css class and text to identify:

    const btn = document.createElement('button')
    btn.classList.add('btn')
    btn.innerText = sound

we also add an event listner for clicks:

    btn.addEventListener('click', () => {
        stopSongs()
        console.log(sound)
        document.getElementById(sound).play()
    })

the eventListender basically stop the current sound and play the song.
to play the song, we grap our autio tag by its id and use getElementById
and use .play method on the audio tag

now before playing a new sound, we must stop the current audio if there
is still being played.

to do that, we select every element using getElementById and 
run .pause method on each audio by looping with forEach method...
we must also set each audio's current time to be 0 so that we can replay
from start again, this is done by the code below:

function stopSongs() {
    sounds.forEach(sound => {
        const song = document.getElementById(sound)
        song.pause()
        song.currentTime = 0;
    })
}

now that we have a button which can call each sound with an event listener
with its innerText and css styling, we can inser each button into our dom
under <div id="buttons"></div> which is our parent for each button.

    document.getElementById('buttons').appendChild(btn)

10-dad-jokes

lets first look at the dom structure:

<div class="container">
      <h3>Don't Laugh Challenge</h3>
      <div id="joke" class="joke">// Joke goes here</div>
      <button id="jokeBtn" class="btn">Get Another Joke</button>
    </div>

container div surrounds h3, joke div and button.

we have joke div and button as our nodes like below:

const jokeEl = document.getElementById('joke')
const jokeBtn = document.getElementById('jokeBtn')

On click of the button, we want to fetch our data from a server
so we can add an event listener:

jokeBtn.addEventListener('click', generateJoke)
eventListener accepts two arguments, the event and the fucntion we want
to it to take place when the event gets triggered.

and that function is obviously a simple fetch request to our 
api end point which is:

https://icanhazdadjoke.com

now, because fetch api is a promise based function, we can either 
handle the promise with async or using call backs.

since the chose method is async, we need to put async in front of
our function declaration and await on the return value that is a promise
and at the end we can insert our 'joke' div we delcared as a node above
by using innerHTML on the node.


async function generateJoke() {
  const config = {
    headers: {
      Accept: 'application/json',
    },
  }

  const res = await fetch('https://icanhazdadjoke.com', config)
  const data = await res.json()

  jokeEl.innerHTML = data.joke
}


and when the JS loads in the browser, we want to start with a joke,
so we call it so the 'joke' div can load populated.

generateJoke()

11-event-keycodes
very simple project

we are rendering our dom node to be populated with hardcoded html elements
that have 3 dynamic values which come from JS's event object with the 
triggering event of 'keydown', and render that dom which is 
.container with innerHTML which is down by the code below:

const insert = document.getElementById('insert')

window.addEventListener('keydown', (event) => {
  insert.innerHTML = `
  <div class="key">
  ${event.key === ' ' ? 'Space' : event.key} 
  <small>event.key</small>
</div>
<div class="key">
  ${event.keyCode}
  <small>event.keyCode</small>
</div>
<div class="key">
  ${event.code}
  <small>event.code</small>
</div>
  `
})

12-faq-collapse

the html structure: 

 <div class="faq-container">

      <div class="faq active">
        <h3 class="faq-title">Why shouldn't we trust atoms?</h3>
        <p class="faq-text">They make up everything</p>
        <button class="faq-toggle">
          <i class="fas fa-chevron-down"></i>
          <i class="fas fa-times"></i>
        </button>
      </div>...

the 'faq-container' surrounds each individual 'faq'.

on 'faq active' class using .classList.toggle,
several changes need to be made in terms of css.

this is the only js code that picks up divs with 'faq':
const toggles = document.querySelectorAll('.faq-toggle')
toggles.forEach(toggle => {
    toggle.addEventListener('click', () => {
        toggle.parentNode.classList.toggle('active')
    })
})

on faq.active there are the things that we need to change.

0.0.

faq.active {
  background-color: #fff;
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1), 0 3px 6px rgba(0, 0, 0, 0.1);
}

1.0 

faq logos
faq icons are brought in from font awesome.
what we want to use is \f075 which is inserted before and after 

faq.active which can be done this way:

.faq.active::before,
.faq.active::after {
  content: '\f075';
  font-family: 'Font Awesome 5 Free';
  color: #2ecc71;
  font-size: 7rem;
  position: absolute;
  opacity: 0.2;
  top: 20px;
  left: 20px;
  z-index: 0;
}

since we want to rotate the one that is inserted before, we add some extra
properties again down below:

.faq.active::before {
  color: #3498db;
  top: -10px;
  left: -30px;
  transform: rotateY(180deg);
}

2.0
another thing that needs to happen is show the two buttons on and off
with display property

there are two buttons:
chevron-down button to hide

.faq.active .faq-toggle .fa-chevron-down {
  display: none;
}

fa-taimes button to hide when not active and show when active

.faq-toggle .fa-times {
  display: none;
}

.faq.active .faq-toggle .fa-times {
  color: #fff;
  display: block;
}


4.0 lastly we want to show the text inside upon active:

.faq-text {
  display: none;
  margin: 30px 0 0;
}

.faq.active .faq-text {
  display: block;
}

13-random-choice







































